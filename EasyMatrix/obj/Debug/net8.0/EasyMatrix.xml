<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyMatrix</name>
    </assembly>
    <members>
        <member name="T:EasyMatrix.AccurateMatrix">
            <summary>
            Create a matrix using maximum precision
            </summary>
        </member>
        <member name="F:EasyMatrix.AccurateMatrix.chunk_load">
            <summary>
            number of chunks to be read at a time when reading a file
            </summary>
        </member>
        <member name="M:EasyMatrix.AccurateMatrix.InitializeMatrix(System.Decimal[0:,0:])">
            <summary>
            initialize the matrix 
            </summary>
            <param name="values"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:EasyMatrix.AccurateMatrix.#ctor(System.Int32)">
            <summary>
            initialize the matrix as an all 0 matrix
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:EasyMatrix.AccurateMatrix.IsSymmetricPositiveDefinite">
            <summary>
            check if the matrix is both positive and symmetric
            </summary>
            <returns></returns>
        </member>
        <member name="M:EasyMatrix.AccurateMatrix.#ctor(System.String)">
            <summary>
            get a matrix of decimals
            </summary>
            <param name="filePath">Specify the path to the.mtx file</param>
        </member>
        <member name="T:EasyMatrix.AMatrix">
            <summary>
            Abstract class that defines the structure of a generic array with properties for the size and number of valued values.
            </summary>
        </member>
        <member name="T:EasyMatrix.IterativeSolver">
            <summary>
            Abstract class that defines an iterative solver with an abstract Solve method and helper methods such as Norm
            </summary>
        </member>
        <member name="M:EasyMatrix.IterativeSolver.Sqrt(System.Decimal,System.Decimal)">
            <summary>
            compute the square root of a number
            </summary>
            <param name="x">value to calculate the quale root of</param>
            <param name="epsilon">an accuracy of calculation of the root from our number.</param>
            <returns></returns>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:EasyMatrix.IterativeSolver.Norm(System.Decimal[])">
            <summary>
            compute the normalization value of an array 
            </summary>
            <param name="vec">vector to compute the normalization</param>
            <returns></returns>
        </member>
        <member name="M:EasyMatrix.IterativeSolver.NormAxMinusB(System.Decimal[])">
            <summary>
            compute actual tollerance
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:EasyMatrix.JacobiSolver">
            <summary>
            Implement Jacobi's method. Uses an iteration vector and a prior vector to compute the approximate solution iteratively.
            </summary>
        </member>
        <member name="T:Library_Metodi_del_Calcolo_Scientifico.WrapMatrix">
            <summary>
            Wrapper for matrix class
            this class always uses maximum precision possible using decimals
            </summary>
        </member>
        <member name="P:Library_Metodi_del_Calcolo_Scientifico.WrapMatrix.matrix">
            <summary>
            matrix to store the data
            </summary>
        </member>
        <member name="M:Library_Metodi_del_Calcolo_Scientifico.WrapMatrix.#ctor(System.String)">
            <summary>
            create a matrix from a local .mtx file
            </summary>
            <param name="path">location of the .mtx file</param>
        </member>
        <member name="M:Library_Metodi_del_Calcolo_Scientifico.WrapMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            creates a matrix usind a MathNet.Numerics.LinearAlgebra Matrix
            </summary>
            <param name="matrix"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Library_Metodi_del_Calcolo_Scientifico.WrapMatrix.ImportMatrix(System.String)">
            <summary>
            overwrites current matrix with a matrix from a .mtx file
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Library_Metodi_del_Calcolo_Scientifico.WrapMatrix.GetDefaultMatrix(System.Int32)">
            <summary>
            returns a pre-compiled matrix from the library
            </summary>
            <param name="number">insert a number between 1 and 4</param>
            <returns>returns a pre-compiled matrix from the library</returns>
        </member>
        <member name="M:Library_Metodi_del_Calcolo_Scientifico.WrapMatrix.ToString">
            <summary>
            Prints the matrix
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
